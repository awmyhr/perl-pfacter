#!/sbin/sh

# Based on init file from cswopenssh and cswpuppetd


PATH=/usr/bin:/opt/csw/bin:/usr/sbin
PIDFILE=/var/run/cswsshd.pid

# Find the keydir
if [ -d /etc/ssh ]; then
        KEYDIR=/etc/ssh
elif [ -d /etc/opt/csw/ssh ]; then
        KEYDIR=/etc/opt/csw/ssh
elif [ -d /opt/csw/etc/ssh ]; then
        KEYDIR=/opt/csw/etc/ssh
else
        echo "ERROR: No keydir found"
        exit 1
fi

start_sshd() {
    if [ -x /opt/csw/bin/ssh-keygen ]; then
    for ALGO in rsa dsa ; do
        if [ ! -f "$KEYDIR/ssh_host_${ALGO}_key" ]; then
            echo "Creating new ${ALGO} public/private host key pair"
            ssh-keygen -f $KEYDIR/ssh_host_${ALGO}_key -t ${ALGO} -N ''
        fi
    done
    fi

    [ -x /opt/csw/sbin/sshd ] && [ -f /etc/opt/csw/ssh/sshd_config ] && /opt/csw/sbin/sshd &
}

reload_sshd() {
    if [ -r $PIDFILE ]; then
        /usr/bin/kill -HUP `/usr/bin/cat $PIDFILE`
    fi
}

stop_sshd() {
    #
    # If we are switching Run level downwards then we disconnect
    # all connections.
    #
    # Otherwise we just kill the master daemon that is listening
    # and leave the connections active
    if [ -z "$_INIT_RUN_LEVEL" ]; then
            set -- `/usr/bin/who -r`
            _INIT_RUN_LEVEL="$7"
            _INIT_PREV_LEVEL="$9"
    fi
    
    if [ $_INIT_RUN_LEVEL -lt $_INIT_PREV_LEVEL ]; then
            /usr/bin/pkill -u 0 -x sshd
    fi
    if [ -r $PIDFILE ]; then
        pid=`/usr/bin/cat $PIDFILE`
        /usr/bin/kill -TERM $pid
    fi
}

case $1 in 
    start)
        printf "Starting sshd client services:"
        start_sshd
        printf " sshd"
        echo ""
        ;;
    stop)
        printf "Stopping sshd client services:"
        stop_sshd
        printf " sshd"
        echo ""
        ;;

    restart)
        printf "Restarting sshd client services:"
        stop_sshd
        sleep 5
        start_sshd
        printf " sshd"
        echo ""
        ;;
    reload)
        printf "Reloading sshd client services:"
        reload_sshd
        printf " sshd"
        echo ""
        ;;
    status)
        if [ -f $PIDFILE ]; then
            pid=`cat $PIDFILE`
            curpid=`pgrep -f '/opt/csw/sbin/sshd'`
            if [ "$pid" -eq "$curpid" ]; then
                exit 0
            else
                exit 1
            fi
        else
            exit 1
        fi
        ;;
    *)
        echo "Usage: $0 { start | stop | restart | reload | status }"
        exit 1
        ;;
esac    
