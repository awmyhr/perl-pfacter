#!/usr/bin/perl

BEGIN { unshift @INC, './lib'; }

# pfacter, Collect and display facts about the system.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
our $VERSION = '0.01b';

use Getopt::Long;
use strict;
use POSIX qw(strftime);

my ($Hostname, $timestamp, $Environment, $TID, $Message);

chomp($Hostname =  qx( /bin/hostname )) if ( -e '/bin/hostname' );
chomp($Hostname =  qx( /usr/bin/hostname )) if ( -e '/usr/bin/hostname' );
$timestamp = strftime "%FT%T%z", localtime;
$Environment = "development";
$TID = transaction_id();
#PUT /production/report/kermit.com HTTP/1.0
#my $Header->{'content'}= 'ContentType: text/pson';
#Content-Length: 1428

$Message = <<END;
{"host": "$Hostname",
 "time": "$timestamp",
 "_timestamp": "$timestamp",
 "configuration_version": 1357986,
 "transaction_uuid": "$TID",
 "report_format": 4,
 "puppet_version": "p$VERSION",
 "kind": "apply",
 "status": "success",
 "environment": "$Environment",
 "logs": 
  [{"level": "info",
    "message": "check-in",
    "source": "preport",
    "tags": ["info"],
    "time": "$timestamp",
    "file": "nil",
    "line": "nil"}],
 "metrics": 
  {"resources": 
    {"name": "resources",
     "label": "Resources",
     "values": 
      [["total", "Total", 0],
       ["skipped", "Skipped", 0],
       ["failed", "Failed", 0],
       ["failed_to_restart", "Failed to restart", 0],
       ["restarted", "Restarted", 0],
       ["changed", "Changed", 0],
       ["out_of_sync", "Out of sync", 0],
       ["scheduled", "Scheduled", 0]]},
   "time": 
    {"name": "time",
     "label": "Time",
     "values": [["timing", "Timing", 0], ["total", "Total", 0]]},
   "changes": 
    {"name": "changes", "label": "Changes", "values": [["total", "Total", 0]]},
   "events": 
    {"name": "events",
     "label": "Events",
     "values": 
      [["total", "Total", 1],
       ["failure", "Failure", 0],
       ["success", "Success", 1]]}},
 "resource_statuses": 
  {"Notify[info]": 
    {"title": "check-in",
     "file": "nil",
     "line": "nil",
     "resource_type": "Notify",
     "containment_path": ["Notify[info]"],
     "evaluation_time": "nil",
     "tags": ["notify"],
     "time": "$timestamp",
     "failed": "false",
     "changed": "false",
     "out_of_sync": "false",
     "skipped": "false",
     "change_count": 0,
     "out_of_sync_count": 0,
     "events": []}}}
END

print $Message;

sub transaction_id {
    my $num = sprintf("%x", int( rand(4294967295) )) . "-" . sprintf("%x", int( rand(65535) ));
    $num = $num . "-" . sprintf("%x", int( rand(65535) )) . "-" . sprintf("%x", int( rand(65535) ));;
    $num = $num . "-" . sprintf("%x", int( rand(281474976710655) ));
    return $num;
}

1;

